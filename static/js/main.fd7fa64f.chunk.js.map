{"version":3,"sources":["app-components/Exchanger.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BASE_URL","API_KEY","request","url","config","a","fetch","response","json","console","error","useInput","initialValue","callback","params","useState","value","setValue","handleChange","e","target","apply","onChange","getCurrencies","Promise","resolve","reject","Papa","parse","download","header","dynamicTyping","complete","results","data","Converter","current","changeCurrent","currencies","PHY_CURRENCY_LIST_URL","setCurrencies","useEffect","createCurrencyList","useCurrenciesReducer","fromCurrencyInput","toCurrencyInput","exchangeRate","defaultFrom","defaultTo","from","setFrom","to","setTo","fromName","setFromName","toName","setToName","rate","setRate","dailyRate","setDailyRate","setFromCurrency","currency","setToCurrency","query","newRate","parseFloat","log","getExchangeRate","newDailyRate","series","day","details","push","Date","getTime","toFixed","length","getExchangeRateDaily","useExchangeRate","newValue","updateConversion","graphOptions","options","chart","foreColor","fontFamily","dataLabels","enabled","markers","size","style","xaxis","type","axisTicks","color","tooltip","x","format","fill","gradient","shadeIntensity","opacityFrom","opacityTo","stops","className","placeholder","defaultValue","getOptionLabel","option","getOptionValue","height","App","icon","faCoins","href","rel","faGithub","faLinkedin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd7fa64f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport './Exchanger.scss';\nimport Papa from 'papaparse';\nimport ReactApexChart from 'react-apexcharts';\n\n\nconst BASE_URL = 'https://www.alphavantage.co/';\nconst FLOAT_PRECISION = 4;\nconst API_KEY = 'NP2GW775OQW7TW4A';\n\nasync function request(url: string, config?: object) {\n    try {\n        let response = await fetch(url);\n        return response.json();\n    } catch(error) {\n        console.error(error);\n    }\n}\n\n\n/**\n *\n * @param {*} initialValue Handles update during value change of any input field\n * @returns Object containing the latest value, the onChange action and value setter method to be bound to\n *   the corresponding event\n */\n function useInput(initialValue: any, callback?: (current: string) => void, ...params: any) {\n    let [value, setValue] = useState(initialValue);\n  \n    function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        setValue(e.target.value);\n        callback && callback.apply(null, params);\n    }\n  \n    return {\n        value,\n        onChange: handleChange,\n        setValue\n    };\n}\n\nfunction useExchangeRate(initialValue = 1, defaultFrom: string, defaultTo: string) {\n    let [from, setFrom] = useState(defaultFrom);\n    let [to, setTo] = useState(defaultTo);\n\n    let [fromName, setFromName] = useState('United States Dollar');\n    let [toName, setToName] = useState('Euro');\n    \n    let [rate, setRate] = useState(initialValue);\n    let [dailyRate, setDailyRate] = useState<any>([]);\n    // const API_KEY = 'demo';\n\n    useEffect(() => {\n        async function getExchangeRate(from: string, to: string) {\n            try {\n                let query = `query?function=CURRENCY_EXCHANGE_RATE&from_currency=${from}&to_currency=${to}&apikey=${API_KEY}`;\n                let response = await request(`${BASE_URL}${query}`);\n                let newRate = parseFloat(response['Realtime Currency Exchange Rate']['5. Exchange Rate']);\n                setRate(newRate);\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        getExchangeRate(from, to);\n    }, [from,to]);\n\n    useEffect(() => {\n        async function getExchangeRateDaily(from: string, to: string) {\n            try {\n                let query = `query?function=FX_DAILY&from_symbol=${from}&to_symbol=${to}&apikey=${API_KEY}`;\n                let response = await request(`${BASE_URL}${query}`);\n                let newDailyRate = response['Time Series FX (Daily)'];\n                let series = [];\n                for (let day in newDailyRate) {\n                    let details = newDailyRate[day];\n                    series.push([\n                        new Date(day).getTime(),\n                        parseFloat(details['4. close']).toFixed(FLOAT_PRECISION)\n                    ]);\n                    if (series.length === 30) {\n                        break;\n                    }\n                }\n                setDailyRate(series);\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        getExchangeRateDaily(from, to);\n    }, [from,to]);\n\n    function setFromCurrency(currency: any) {\n        setFrom(currency['currency code']);\n        setFromName(currency['currency name']);\n    }\n    function setToCurrency(currency: any) {\n        setTo(currency['currency code']);\n        setToName(currency['currency name']);\n    }\n\n    return {\n        rate,\n        dailyRate,\n        from,\n        fromName,\n        setFromCurrency,\n        to,\n        toName,\n        setToCurrency,\n    }\n}\n\nasync function getCurrencies(url: string) {\n    return new Promise((resolve, reject) => {\n        Papa.parse(url, {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            complete: function(results) {\n                resolve(results.data);\n            }\n        });\n    });\n}\nfunction useCurrenciesReducer() {\n    const PHY_CURRENCY_LIST_URL = `${BASE_URL}physical_currency_list/`;\n    let [currencies, setCurrencies] = useState<any>([]);\n\n    // Get currencies list\n    useEffect(() => {\n        async function createCurrencyList() {\n            let response = await getCurrencies(PHY_CURRENCY_LIST_URL);\n            setCurrencies(response);\n        }\n        createCurrencyList();\n    }, []);\n\n    return currencies;\n}\n\nfunction Converter() {\n    let [current, changeCurrent] = useState('from');\n    let currencies = useCurrenciesReducer();\n    let fromCurrencyInput = useInput(0, changeCurrent, 'from');\n    let toCurrencyInput = useInput(0, changeCurrent, 'to');\n    let exchangeRate = useExchangeRate(1, 'USD', 'EUR');\n\n    useEffect(() => {\n        async function updateConversion() {\n            if (current === 'from') {\n                let newValue = (fromCurrencyInput.value * exchangeRate.rate).toFixed(FLOAT_PRECISION);\n                toCurrencyInput.setValue(parseFloat(newValue));\n            } else {\n                let newValue = (toCurrencyInput.value / exchangeRate.rate).toFixed(FLOAT_PRECISION);\n                fromCurrencyInput.setValue(parseFloat(newValue));\n            }\n        }\n        updateConversion();\n    }, [\n        exchangeRate.rate,\n        fromCurrencyInput,\n        fromCurrencyInput.value, \n        toCurrencyInput,\n        toCurrencyInput.value,\n        current\n    ]);\n\n    interface Currencies {\n        'currency name': string,\n        'currency code': string\n    };\n\n    let xaxis: ApexXAxis = {\n        type: 'datetime',\n        axisTicks: {\n            color: '#000'\n        }\n    };\n    let chart: ApexChart = {\n        foreColor: \"#fff\",\n        fontFamily: 'Poppins',\n    }\n\n    // Graph\n    let graphOptions = {\n        series: [{\n            data: exchangeRate.dailyRate\n        }],\n        options: {\n            chart,\n            dataLabels: {\n                enabled: false\n            },\n            markers: {\n                size: 0,\n                style: 'hollow',\n            },\n            xaxis,\n            tooltip: {\n                x: {\n                format: 'dd MMM yyyy'\n                }\n            },\n            fill: {\n                type: 'gradient',\n                gradient: {\n                shadeIntensity: 1,\n                opacityFrom: 0.7,\n                opacityTo: 0.9,\n                stops: [0, 100]\n                }\n            },\n        }, \n    };\n\n    return (\n        <div className=\"exchanger\">\n            <div className=\"converter\">\n                <div className=\"result\">\n                    <div className=\"from-text\">\n                        {fromCurrencyInput.value} {exchangeRate.fromName} equals\n                    </div>\n                    <div className=\"to-text\">\n                        {toCurrencyInput.value} {exchangeRate.toName}\n                    </div>\n                </div>\n                <div className=\"currency-container from-currency-container\">\n                    <input\n                        className='currency-value from-currency-input'\n                        type=\"number\"\n                        placeholder=''\n                        value={fromCurrencyInput.value}\n                        onChange={fromCurrencyInput.onChange}\n                    />\n                    <Select\n                        className=\"currency from-currency\"\n                        options={currencies}\n                        defaultValue={{'currency code': 'USD', 'currency name': 'United States Dollar'}}\n                        onChange={exchangeRate.setFromCurrency}\n                        getOptionLabel={(option: Currencies) => option['currency name']}\n                        getOptionValue={(option: Currencies) => option['currency code']}\n                    />\n                </div>\n                <div className=\"currency-container to-currency-container\">\n                    <input\n                        className='currency-value to-currency-input'\n                        type=\"number\"\n                        placeholder=''\n                        value={toCurrencyInput.value}\n                        onChange={toCurrencyInput.onChange}\n                    />\n                    <Select\n                        className=\"currency to-currency\"\n                        options={currencies}\n                        defaultValue={{'currency code': 'EUR', 'currency name': 'Euro'}}\n                        onChange={exchangeRate.setToCurrency}\n                        getOptionLabel={(option: Currencies) => option['currency name']}\n                        getOptionValue={(option: Currencies) => option['currency code']}\n                    />\n                </div>\n            </div>\n            <div className=\"exchange-history\">\n                <ReactApexChart\n                    className=\"history-chart\"\n                    series={graphOptions.series}\n                    options={graphOptions.options}\n                    type=\"area\"\n                    height={300}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default Converter;","import Exchanger from './app-components/Exchanger';\nimport './App.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub, faLinkedin } from '@fortawesome/free-brands-svg-icons';\nimport { faCoins } from '@fortawesome/free-solid-svg-icons';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <FontAwesomeIcon icon={faCoins} /> Currency Convertor\n      </header>\n      <div className=\"app-content\">\n        <Exchanger />\n      </div>\n      <div className=\"footer\">\n        <div className=\"de-emphasize\">Created by</div>\n        <div className=\"creator-name\">\n          <a href=\"mailto: uv.dare@gmail.com\">Venkatesh Ramalingam</a>\n        </div>\n        <div className=\"social\">\n          <a href=\"https://github.com/RVenkatesh\" target=\"_blank\" rel=\"noreferrer\">\n            <FontAwesomeIcon icon={faGithub} />\n          </a>\n          <a href=\"https://www.linkedin.com/in/venkatesh-ramalingam-76368915/\" target=\"_blank\" rel=\"noreferrer\">\n            <FontAwesomeIcon icon={faLinkedin} />\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}